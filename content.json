[{"title":"AutoLayout小例子","date":"2015-11-10T12:10:33.000Z","path":"2015/11/10/hello-world/","text":"约束快捷键 AutoLayout详细理解 经典例子(屏幕上两个等高view) 按钮平分(其实平分我们只要在一个容器里面一次性全部给足上下左右的距离然后让它们等高等宽即可) 给ScrollView添加约束 下面的结构上面是一个UIImageView下面是一个UIScrollView里面嵌套了两个UILabel,一个名称,一个描述 注意点:给UIImageView添加约束的时候让它跟控制器的View等高再编辑约束改为0.5就能与屏幕等高了 描述Label的行数要改为0,否则不会换行 约束好之后要给UIScrollView和两个Label添加上与UIImageView等宽的约束.否则它是向左右滚动而不是上下滚动,效果就不是我们预想的了","tags":[{"name":"AutoLayout","slug":"AutoLayout","permalink":"//litten.me/tags/AutoLayout/"},{"name":"自动布局","slug":"自动布局","permalink":"//litten.me/tags/自动布局/"}]},{"title":"iOS判断版本号","date":"2015-06-13T09:14:13.000Z","path":"2015/06/13/iOS判断版本号/","text":"iOS中判断当前版本是否是第一次进入 OC版本12345678910111213141516171819202122/** 判断是否是新版本 @return 返回1是新版本 0不是新版本 */- (BOOL) isNewVersion &#123; //获取info里的version,取到的总是当前的版本号 NSString *currentVersion = [NSBundle mainBundle].infoDictionary[@&quot;CFBundleShortVersionString&quot;]; //获取到之前的版本 NSString *sandboxVersionKey = @&quot;sandboxVersionKey&quot;; NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults]; NSString *sandboxVersion = [userDefaults objectForKey:sandboxVersionKey]; //保存当前版本号 [userDefaults setValue:currentVersion forKey:sandboxVersionKey]; [userDefaults synchronize]; // 当前版本和沙盒版本不一致就是新版本 return currentVersion != sandboxVersion;&#125; Swift版本123456789101112131415161718/** 判断是否是新版本 */ fileprivate func isNewVersion() -&gt; Bool &#123; // 获取当前的版本号 let currentVersion = Bundle.main.infoDictionary?[&quot;CFBundleShortVersionString&quot;] as? String // 获取到之前的版本号 let sandboxVersionKey = &quot;sandboxVersionKey&quot; let sandboxVersion = UserDefaults.standard.string(forKey: sandboxVersionKey) // 保存当前版本号 UserDefaults.standard.set(currentVersion, forKey: sandboxVersionKey) UserDefaults.standard.synchronize()//立即保存 // 当前版本和沙盒版本不一致就是新版本 return currentVersion != sandboxVersion &#125;","tags":[]},{"title":"浮动显示分类","date":"2015-04-08T10:51:26.000Z","path":"2015/04/08/UIView分类/","text":"一个简单的分类,其功能是让一个View在指定时间以后自动移除掉 .h文件 123456789101112131415161718#import &lt;UIKit/UIKit.h&gt;//浮动提示@interface UIView (AutoRemove)/** 让视图显示指定时间后移除掉 @param time 指定时间,也就是多少秒后移除 */- (void) removeAfterDelay:(NSTimeInterval)time;/** 取消让视图移除方法 */- (void) removelmediatly;@end .m 文件 1234567891011121314#import &quot;UIView+AutoRemove.h&quot;@implementation UIView (AutoRemove)- (void)removeAfterDelay:(NSTimeInterval)time&#123; [self performSelector:@selector(removeFromSuperview) withObject:nil afterDelay:time];&#125;- (void)removelmediatly&#123; [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(removeFromSuperview) object:nil]; [self removeFromSuperview];&#125;@end","tags":[{"name":"UIView分类","slug":"UIView分类","permalink":"//litten.me/tags/UIView分类/"}]}]